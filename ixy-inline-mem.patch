From 37a29380b3df274ae4ebf15b2d8ea844b8de1057 Mon Sep 17 00:00:00 2001
From: Paul Emmerich <emmericp@net.in.tum.de>
Date: Fri, 1 Dec 2017 13:59:40 +0100
Subject: [PATCH] inline mem

---
 src/memory.c | 22 ----------------------
 src/memory.h | 27 ++++++++++++++++++++++++---
 2 files changed, 24 insertions(+), 25 deletions(-)

diff --git a/src/memory.c b/src/memory.c
index 9d31357..786a006 100644
--- a/src/memory.c
+++ b/src/memory.c
@@ -90,26 +90,4 @@ struct mempool* memory_allocate_mempool(uint32_t num_entries, uint32_t entry_siz
 	return mempool;
 }
 
-uint32_t pkt_buf_alloc_batch(struct mempool* mempool, struct pkt_buf* bufs[], uint32_t num_bufs) {
-	if (mempool->free_stack_top < num_bufs) {
-		warn("memory pool %p only has %d free bufs, requested %d", mempool, mempool->free_stack_top, num_bufs);
-		num_bufs = mempool->free_stack_top;
-	}
-	for (uint32_t i = 0; i < num_bufs; i++) {
-		uint32_t entry_id = mempool->free_stack[--mempool->free_stack_top];
-		bufs[i] = (struct pkt_buf*) (((uint8_t*) mempool->base_addr) + entry_id * mempool->buf_size);
-	}
-	return num_bufs;
-}
-
-struct pkt_buf* pkt_buf_alloc(struct mempool* mempool) {
-	struct pkt_buf* buf = NULL;
-	pkt_buf_alloc_batch(mempool, &buf, 1);
-	return buf;
-}
-
-void pkt_buf_free(struct pkt_buf* buf) {
-	struct mempool* mempool = buf->mempool;
-	mempool->free_stack[mempool->free_stack_top++] = buf->mempool_idx;
-}
 
diff --git a/src/memory.h b/src/memory.h
index c0d7abb..5d007a7 100644
--- a/src/memory.h
+++ b/src/memory.h
@@ -4,6 +4,7 @@
 #include <stdint.h>
 #include <stdbool.h>
 #include <unistd.h>
+#include "log.h"
 
 #define HUGE_PAGE_BITS 21
 #define HUGE_PAGE_SIZE (1 << HUGE_PAGE_BITS)
@@ -37,8 +38,28 @@ struct dma_memory {
 struct dma_memory memory_allocate_dma(size_t size, bool require_contiguous);
 
 struct mempool* memory_allocate_mempool(uint32_t num_entries, uint32_t entry_size);
-uint32_t pkt_buf_alloc_batch(struct mempool* mempool, struct pkt_buf* bufs[], uint32_t num_bufs);
-struct pkt_buf* pkt_buf_alloc(struct mempool* mempool);
-void pkt_buf_free(struct pkt_buf* buf);
+
+static inline uint32_t pkt_buf_alloc_batch(struct mempool* mempool, struct pkt_buf* bufs[], uint32_t num_bufs) {
+	if (mempool->free_stack_top < num_bufs) {
+		warn("memory pool %p only has %d free bufs, requested %d", mempool, mempool->free_stack_top, num_bufs);
+		num_bufs = mempool->free_stack_top;
+	}
+	for (uint32_t i = 0; i < num_bufs; i++) {
+		uint32_t entry_id = mempool->free_stack[--mempool->free_stack_top];
+		bufs[i] = (struct pkt_buf*) (((uint8_t*) mempool->base_addr) + entry_id * mempool->buf_size);
+	}
+	return num_bufs;
+}
+
+static inline struct pkt_buf* pkt_buf_alloc(struct mempool* mempool) {
+	struct pkt_buf* buf = NULL;
+	pkt_buf_alloc_batch(mempool, &buf, 1);
+	return buf;
+}
+
+static inline void pkt_buf_free(struct pkt_buf* buf) {
+	struct mempool* mempool = buf->mempool;
+	mempool->free_stack[mempool->free_stack_top++] = buf->mempool_idx;
+}
 
 #endif //IXY_MEMORY_H
-- 
2.7.4
